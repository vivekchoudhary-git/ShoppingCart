 --------- Notes related to image path ------------
 
 <td><img alt="not found" src="${pageContext.request.contextPath}/categoryimage/${cat.imageName}" width="50px" height="50px"></td>
   
   üîπ ${pageContext.request.contextPath}
‚Ä¢	This gives you the base path of your web application.
‚Ä¢	It ensures that all paths start relative to the root of your web app, no matter where the JSP file is located.
‚Ä¢	For example, if your app is deployed as:
http://localhost:8080/myapp
then ${pageContext.request.contextPath} will return /myapp.
   
 ------------------------------------------------------------------------------------------------------------  
 
  <!-- below link can throw error sometimes therefore it is not recommended by chatGPT -->
<!-- 	<link rel="stylesheet" href="resources/css/style.css"> -->
	
<!-- 	we can see our css file i.e style.css at http://localhost:8080/resources/css/style.css after using pageContext.request.contextPath -->
        <!-- this is recommended by chatGPT -->
	<link rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/style.css">
	
	
-------------------------------------------------------------------------------------------------------------	

<c:forEach items="${productsList}" var="prod" varStatus="c">
<tr>
      <th scope="row"><c:out value="${c.count}"></c:out></th>
      <td><c:out value="${cat.name}"></c:out></td>
 </tr>
 
 over here  varStatus="c" is used to automatically assign serial number in the table    
 
----------------------------------------------------------------------------------------------------------------------------------------------------- 

use AJAX or jQuery in addProduct.jsp so that when we enter the discount after price then automatically it should show discounted price on the same page.

---------------------------------------------------------------------------------------------------------------

                                   Notes related to Spring Security Login

Refer class SecurityConfig

1)  .loginPage("/signin")

This tells Spring Security which page to show when a user needs to log in.

You must have a controller that maps /signin and returns a login JSP/HTML page.


2) .loginProcessingUrl("/login")

This is the URL where your login form submits credentials (username/password).

Spring Security handles this URL internally ‚Äî you do not need to create a controller for it.

It will:

Check the credentials

Authenticate the user

Call your successHandler or go to a default success page


3) .logoutUrl("/logout")
This is the URL to trigger logout.

When a user visits or sends a POST to /logout, Spring Security:

Invalidates the session

Clears the authentication

Redirects to the logout success page

üìå Important:

Spring Security only accepts POST by default (as of 5.x and up).

If you want logout via GET (e.g. from a link), you must allow it explicitly (not recommended for security).

‚úÖ Recommended logout form (safe way):

html
Copy
Edit
<form action="/logout" method="post">
    <button type="submit">Logout</button>
</form>
If you still want to enable logout via GET, use:

.logoutRequestMatcher(new AntPathRequestMatcher("/logout", "GET"))


4) .logoutSuccessUrl("/signin?logout=true")
After logout, the user will be redirected to /signin?logout=true

You can use this query param in your JSP to show a logout message:

<c:if test="${not empty param.logout}">
    <div style="color: green;">You have been logged out successfully.</div>
</c:if>


--------------------------------------------------------------------------------------------------------------------
                                          Login Page related notes
        

Question :   what is param ?


ChatGPT said:
In JSP, param is a built-in implicit object provided by the JSP Expression Language (EL). It gives you access to request parameters, which typically come from:

URL query strings (like ?error=true)

Form submissions (<form method="get/post" action="/...">)

‚úÖ Examples
üîπ URL: http://localhost:8080/signin?error=true
jsp
Copy
Edit
<c:if test="${not empty param.error}">
    <!-- This block will run -->
</c:if>
üîπ URL: http://localhost:8080/signin?logout=true
jsp
Copy
Edit
<c:if test="${param.logout == 'true'}">
    You have been logged out!
</c:if>
‚úÖ How param Works
Expression	Meaning
${param.error}	Gets value of the error query parameter
${param.logout}	Gets value of the logout query parameter
${param.username}	Gets value of the username from a form or URL

note :
param scope is read-only.

You can‚Äôt modify query parameters in JSP ‚Äî they‚Äôre part of the HTTP request.


----------------------------------------------------------------------------------------------------------------------
                                   Login Page related notes
 
 
Question :  do we have to first  get logout=true in controller and then send to jsp using Model


ChatGPT said:
No‚ÄØ‚Äî‚ÄØyou don‚Äôt have to do anything in your controller.

param.logout (and param.error, param.anythingElse) is read directly from the request‚Äôs query‚Äëstring parameters. When Spring Security redirects the user to


/signin?logout=true
after a successful logout, that ?logout=true part is automatically available in the JSP EL via the implicit param map. The JSP engine does roughly the same thing you would do manually in a servlet:


String logout = request.getParameter("logout");   // ‚Üê already there
So in the view you can simply write:


<c:if test="${not empty param.logout}">
    <div class="alert alert-success">Logged out successfully</div>
</c:if>
and it will work without any controller code or Model attributes.


----------------------------------------------------------------------------------------------------------------
                                     Login Page related notes

Question :  Does spring boot automatically sets the error message in session


ChatGPT said:
Yes, ‚úÖ Spring Security automatically sets the error message in the session when login fails.

üîç Specifically:
When authentication fails, Spring Security stores the exception in the session using this key:


SPRING_SECURITY_LAST_EXCEPTION
This is available in JSP as:


${sessionScope.SPRING_SECURITY_LAST_EXCEPTION}
The exception object is usually a subclass of AuthenticationException, such as:

BadCredentialsException ‚Üí message: "Bad credentials"

DisabledException ‚Üí message: "User is disabled"

LockedException, AccountExpiredException, etc.

‚úÖ How it gets there:
When login fails, Spring Security's default SimpleUrlAuthenticationFailureHandler:

Redirects back to the login page (like /signin?error)

Stores the exception in HttpSession:


request.getSession().setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, exception);
which is effectively:


SPRING_SECURITY_LAST_EXCEPTION


-----------------------------------------------------------------------------------------------------------------------
